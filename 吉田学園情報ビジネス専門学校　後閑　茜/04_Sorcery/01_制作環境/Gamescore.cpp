//=============================================================================
//
// ゲームスコア処理 [Gamescore.cpp]
// Author : Gokan Akane
//
//=============================================================================
#include "manager.h"
#include "renderer.h"
#include "number.h"
#include "scene.h"
#include "scoreBase.h"
#include "GameScore.h"
#include "time.h"
#include "ranking.h"
#include "fade.h"

//=============================================================================
// 静的メンバ変数
//=============================================================================

//*****************************************************************************
// ▽class CGameScore
//*****************************************************************************
//=============================================================================
// コンストラクタ
//=============================================================================
CGameScore::CGameScore()
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		m_apNumber[nCnt] = NULL;
	}

}
//=============================================================================
// デストラクタ
//=============================================================================
CGameScore::~CGameScore() {}
//=============================================================================
// スコアの初期化処理
//=============================================================================
HRESULT CGameScore::Init(void)
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		m_apNumber[nCnt] = CNumber::Create();
		m_apNumber[nCnt]->SetPos(D3DXVECTOR3(900.0f, 50.0f, 0.0f), nCnt, 30.0f, 30.0f);
		m_nScoreData[nCnt] = 0;
	}
	return S_OK;
}

//=============================================================================
// スコアの終了処理
//=============================================================================
void CGameScore::Uninit(void)
{
	//最終スコアをマネージャーに渡しておく
	CManager::SetScore(m_nScore);

	//m_apNumberを破棄（ポリゴンが破棄されただけでScore自体は破棄されていない）
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		if (m_apNumber[nCnt] != NULL)
		{
			m_apNumber[nCnt]->Uninit();

			delete m_apNumber[nCnt];
			m_apNumber[nCnt] = NULL;
		}
	}
}
//=============================================================================
// スコアの更新処理
//=============================================================================
void CGameScore::Update(void)
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		m_apNumber[nCnt]->Update();
		m_apNumber[nCnt]->SetNumber(m_nScoreData[nCnt]);
	}
}
//=============================================================================
// スコアの描画処理
//=============================================================================
void CGameScore::Draw(void)
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		m_apNumber[nCnt]->Draw();
	}
}
