//=============================================================================
//
// チュートリアル用敵処理 [EnemyTutorial.cpp]
// Author : 
//
//=============================================================================
#include "manager.h"
#include "renderer.h"
#include "scene.h"
#include "Input.h"
#include "scene2D.h"
#include "game.h"
#include "bullet.h"
#include "enemyBase.h"
#include "enemyTutorial.h"
#include "playerBase.h"
#include "scoreBase.h"
#include "Explosion.h"
#include "StageBase.h"

//=============================================================================
// 静的メンバ変数
//=============================================================================

//*****************************************************************************
// ▽class CEnemyTutorial
//*****************************************************************************
//=============================================================================
// コンストラクタ
//=============================================================================
CEnemyTutorial::CEnemyTutorial()
{
	m_nLife = 1;
	m_nCntAnim = 0;
	m_nPatturnAnim = 0;
}
//=============================================================================
// デストラクタ
//=============================================================================
CEnemyTutorial::~CEnemyTutorial() {}
//=============================================================================
// 敵の初期化処理
//=============================================================================
HRESULT CEnemyTutorial::Init(void)
{
	CEnemy::Init();
	return S_OK;
}
//=============================================================================
// 敵の終了処理
//=============================================================================
void CEnemyTutorial::Uninit(void)
{
	CEnemy::Uninit();
}
//=============================================================================
// 敵の更新処理
//=============================================================================
void CEnemyTutorial::Update(void)
{
	m_nCntAnim++;
	/* アニメーション */
	if (m_nCntAnim % 30 == 0)
	{
		m_nPatturnAnim++;
		SetAnimX(NORMALENEMY_MAXANIM, 1, m_nPatturnAnim);

		if (m_nPatturnAnim >= NORMALENEMY_MAXANIM)
		{
			m_nPatturnAnim = 0;
		}
	}

	CEnemy::Update();
}

//=============================================================================
// 敵の描画処理
//=============================================================================
void CEnemyTutorial::Draw(void)
{
	CEnemy::Draw();
}
