//*****************************************************************************
//
//	スコアの処理[number.cpp]
//	Auther : Shun Yokomichi
//
//*****************************************************************************

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "score.h"		// スコア

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define NUMBER_WIDHT			(14.5f)		// 幅の大きさ
#define	NUMBER_HIGHT			(14.5f)		// 高さの大きさ
#define POS_X					(1040.0f)	// 位置座標(X軸)
#define POS_Y					(65.0f)		// 位置座標(Y軸)
#define POS_X_INTERVAL			(35.0f)		// 距離間隔

//*****************************************************************************
//				静的メンバ変数
//*****************************************************************************
int CScore::m_nScore = 0;
CNumber2D *CScore::m_apNumber[MAX_SCORE] = {};

//*****************************************************************************
//				スコアの生成
//*****************************************************************************
CScore *CScore::Create()
{
	CScore *pScore = NULL;		// ポインタを生成

	if (pScore == NULL)
	{
		pScore = new CScore;
		if (pScore != NULL)
		{
			pScore->Init();
		}
	}

	return pScore;
}

//*****************************************************************************
//		コンストラクタ
//*****************************************************************************
CScore::CScore() : CScene(PRIORITY_UI, OBJTYPE_SCORE)
{
	// デフォルト値にする
	for (int nCntScore = 0; nCntScore < MAX_SCORE; nCntScore++)
	{
		m_apNumber[nCntScore] = NULL;
	}
	m_nScore = 0;
}

//*****************************************************************************
//		デストラクタ
//*****************************************************************************
CScore::~CScore()
{

}

//*****************************************************************************
//		初期化処理
//*****************************************************************************
HRESULT CScore::Init()
{
	CNumber::Load();		//　数字の読み込み

	for (int nCntScore = 0; nCntScore < MAX_SCORE; nCntScore++)
	{
		m_apNumber[nCntScore] = new CNumber2D;
		m_apNumber[nCntScore]->Init(D3DXVECTOR3(POS_X - (nCntScore * POS_X_INTERVAL), POS_Y, 0.0f), D3DXVECTOR3(NUMBER_WIDHT, NUMBER_HIGHT, 0.0f), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f));
	}
	m_nScore = 0;
	return S_OK;
}

//*****************************************************************************
//		終了処理
//*****************************************************************************
void CScore::Uninit()
{
	for (int nCntScore = 0; nCntScore < MAX_SCORE; nCntScore++)
	{
		m_apNumber[nCntScore]->Uninit();
		m_apNumber[nCntScore] = NULL;
	}

	CScene::SetDeath();		// 死亡フラグ
}

//*****************************************************************************
//		更新処理
//*****************************************************************************
void CScore::Update()
{
}

//*****************************************************************************
//		描画処理
//*****************************************************************************
void CScore::Draw()
{
	for (int nCntScore = 0; nCntScore < MAX_SCORE; nCntScore++)
	{
		m_apNumber[nCntScore]->Draw();
	}
}

//*****************************************************************************
//		スコアの設定
//*****************************************************************************
void CScore::SetScore(int nScore)
{
	m_nScore = nScore;
	int nTexData = m_nScore;

	for (int nCntScore = 0; nCntScore < MAX_SCORE; nCntScore++)
	{
		m_apNumber[nCntScore]->SetTex((nTexData % 1), 1, D3DXVECTOR2((nTexData * 0.1f), 1.0f));
		nTexData /= 10;
	}
}

//*****************************************************************************
//		スコアの取得
//*****************************************************************************
int CScore::GetScore(void)
{
	return m_nScore;
}

//*****************************************************************************
//		スコアの加算
//*****************************************************************************
void CScore::AddScore(int nValue)
{
	m_nScore += nValue;		// 加算
	SetScore(m_nScore);
}