//=============================================================================
//
// アイテム処理 [item.cpp]
// Author : YUTARO ABE
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "wall.h"			// 壁
#include "manager.h"		// マネージャー
#include "renderer.h"		// レンダラー
#include "input.h"			// 入力
#include "font.h"			// フォント
#include "camera.h"			// カメラ

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************
LPDIRECT3DTEXTURE9 CWall::m_pTexture = NULL;

//=============================================================================
// コンストラクタ								(public)	*** CItem ***
//=============================================================================
CWall::CWall() : CScene3D(CScene::PRIORITY_1, CScene::OBJTYPE_WALL)
{
	
}

//=============================================================================
// デストラクタ									(public)	*** CItem ***
//=============================================================================
CWall::~CWall()
{

}

//=============================================================================
//	アイテムの生成
//=============================================================================
CWall *CWall::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 size)
{
	CWall *p3Dobject = {};

	if (p3Dobject == NULL)
	{//	アイテムの生成
		p3Dobject = new CWall;
		if (p3Dobject != NULL)
		{//アイテムの初期化
			p3Dobject->Init(pos, rot, size);
		}
	}
	return p3Dobject;
}

//=============================================================================
// 初期化処理									(public)	*** CItem ***
//=============================================================================
HRESULT CWall::Init(D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 size)
{
	CScene3D::SetInitAll(pos, rot, size, D3DXCOLOR(0.5f, 0.5f, 0.5f, 1.0f), D3DXVECTOR2(1.0f, 1.0f), CScene3D::SCENE3DTYPE_NORMAL);
	CScene3D::Init();
	CScene3D::BindTexture(m_pTexture);
	
	return S_OK;
}

//=============================================================================
// 終了処理										(public)	*** CItem ***
//=============================================================================
void CWall::Uninit(void)
{
	CScene3D::Uninit();
}

//=============================================================================
// 更新処理										(public)	*** CItem ***
//=============================================================================
void CWall::Update(void)
{

}

//=============================================================================
// 描画処理										(public)	*** CItem ***
//=============================================================================
void CWall::Draw(void)
{
	CScene3D::Draw();
}
//=============================================================================
// テクスチャの読み込み
//=============================================================================
HRESULT CWall::Load(void)
{
	// デバイス取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\fieldmesh.png", &m_pTexture);

	return S_OK;
}
//=============================================================================
// アンロード処理								(public)	*** CItem ***
//=============================================================================
void CWall::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

void CWall::Collision(D3DXVECTOR3 *pPos, D3DXVECTOR3 *pPosOld, D3DXVECTOR3 *pMode, D3DXVECTOR3 sizeMax, D3DXVECTOR3 sizeMin)
{
	D3DXVECTOR3 pos = CScene3D::Getpos();
	D3DXVECTOR3 rot = CScene3D::Getrot();
	D3DXVECTOR3 size = CScene3D::Getsize();

	if ((pPos->y) < (pos.y + size.y))
	{// Y範囲確認
		if (rot.y == D3DX_PI * 0.5f)
		{
			if ((pos.x) <= (pPos->x + sizeMax.x) && (pPosOld->x + sizeMax.x) <= (pos.x))
			{// 左からの当たり判定
				pPos->x = pos.x + (-sizeMax.x);
				pMode->x = 0.0f;
			}
		}
		else if (rot.y == -D3DX_PI * 0.5f)
		{
			if ((pPos->x + sizeMin.x) <= (pos.x) && (pos.x) <= (pPosOld->x + sizeMin.x))
			{// 右からの当たり判定
				pPos->x = pos.x + (-sizeMin.x);
				pMode->x = 0.0f;
			}
		}
	}
}