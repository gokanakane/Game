//=============================================================================
//
// 影処理 [shadow.cpp]
// Author : Eisuke Sakagawa
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "shadow.h"
#include "manager.h"
#include "renderer.h"
#include "light.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************

//=============================================================================
// コンストラクタ								(public)	*** CShadow ***
//=============================================================================
CShadow::CShadow()
{


}

//=============================================================================
// デストラクタ									(public)	*** CShadow ***
//=============================================================================
CShadow::~CShadow()
{

}

//=============================================================================
// 初期化処理									(public)	*** CShadow ***
//=============================================================================
HRESULT CShadow::Init(void)
{
	return S_OK;
}

//=============================================================================
// 終了処理										(public)	*** CShadow ***
//=============================================================================
void CShadow::Uninit(void)
{

}

//=============================================================================
// 更新処理										(public)	*** CShadow ***
//=============================================================================
void CShadow::Update(void)
{

}

//=============================================================================
// 描画処理										(public)	*** CShadow ***
//=============================================================================
void CShadow::Draw(void)
{

}

//=========================================================================================================================
// 影設定処理
//=========================================================================================================================
void CShadow::SetShadow(D3DXMATRIX &mtxWorld, LPD3DXMESH &pMesh, DWORD &nNumMat, D3DXVECTOR3 pos)
{
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();	// デバイスの取得
	D3DLIGHT9 Light = CManager::GetLight()->GetLightVec();
	D3DXVECTOR4 vLightDirection = D3DXVECTOR4(Light.Direction, 0.0f);

	//影用の射影マトリクスを作成
	D3DXMATRIX mmatrixShadow;
	D3DXVECTOR3 vPoint = pos;
	D3DXVECTOR3 vNormal(0.0f, -1.0f, 0.0f);
	D3DXPLANE GroundPlane;
	D3DXPlaneFromPointNormal(&GroundPlane, &vPoint, &vNormal);
	D3DXMatrixShadow(&mmatrixShadow, &vLightDirection, &GroundPlane);

	mmatrixShadow = mtxWorld * mmatrixShadow;

	D3DMATERIAL9 matDef;						// 現在のマテリアル保存用

												// 現在のマテリアルを取得
	pDevice->GetMaterial(&matDef);

	//影用マテリアルの設定
	D3DMATERIAL9 Material;
	ZeroMemory(&Material, sizeof(D3DMATERIAL9));
	Material.Emissive.a = 1.0f;
	Material.Emissive.r = 0.1f;
	Material.Emissive.g = 0.1f;
	Material.Emissive.b = 0.1f;

	pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);			// αブレンドを停止

																	//影としてレンダリング
	pDevice->SetTransform(D3DTS_WORLD, &mmatrixShadow);
	pDevice->SetMaterial(&Material);
	for (int nCntMat = 0; nCntMat < (int)nNumMat; nCntMat++)
	{
		pMesh->DrawSubset(nCntMat);
	}
	pDevice->SetMaterial(&matDef);				// 現在のマテリアル戻す

	pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);			// αブレンドを行う
}