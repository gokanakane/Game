//=============================================================================
//
// レンダリング処理 [renderer.h]
// Author : 目黒 未来也
//
//=============================================================================
#include "renderer.h"
#include "main.h"
#include "scene.h"
#include "debugProc.h"
#include "fade.h"
#include "camera.h"
#include "CameraManager.h"
#include "manager.h"

//=============================================================================
// マクロ定義
//=============================================================================
#define WINDOW_CLEAR_COLOR (D3DXCOLOR(1.0f,1.0f,1.0f,1.0f))

//=============================================================================
// レンダリングクラスのコンストラクタ
//=============================================================================
CRenderer::CRenderer()
{
	// 値をクリア
	m_pD3D = NULL;
	m_pD3DDevice = NULL;
	//#ifdef _DEBUG
	//	m_pFont = NULL;
	//#endif
}

//=============================================================================
// デストラクタ
//=============================================================================
CRenderer::~CRenderer()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CRenderer::Init(HWND hWnd, bool bWindow)
{
	D3DPRESENT_PARAMETERS d3dpp;
	D3DDISPLAYMODE d3ddm;

	// Direct3Dオブジェクトの作成
	m_pD3D = Direct3DCreate9(D3D_SDK_VERSION);
	if (m_pD3D == NULL)
	{
		return E_FAIL;
	}

	// 現在のディスプレイモードを取得
	if (FAILED(m_pD3D->GetAdapterDisplayMode(D3DADAPTER_DEFAULT, &d3ddm)))
	{
		return E_FAIL;
	}

	// デバイスのプレゼンテーションパラメータの設定
	ZeroMemory(&d3dpp, sizeof(d3dpp));								// ワークをゼロクリア
	d3dpp.BackBufferCount = 1;							// バックバッファの数
	d3dpp.BackBufferWidth = SCREEN_WIDTH;				// ゲーム画面サイズ(幅)
	d3dpp.BackBufferHeight = SCREEN_HEIGHT;				// ゲーム画面サイズ(高さ)
	d3dpp.BackBufferFormat = d3ddm.Format;				// カラーモードの指定
	d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;		// 映像信号に同期してフリップする
	d3dpp.EnableAutoDepthStencil = TRUE;						// デプスバッファ（Ｚバッファ）とステンシルバッファを作成
																//d3dpp.AutoDepthStencilFormat	 = D3DFMT_D16;					// デプスバッファとして16bitを使う　
	d3dpp.AutoDepthStencilFormat = D3DFMT_D24S8;				// depthを24bitステンシルを8bit
	d3dpp.Windowed = bWindow;						// ウィンドウモード
	d3dpp.FullScreen_RefreshRateInHz = D3DPRESENT_RATE_DEFAULT;		// リフレッシュレート
	d3dpp.PresentationInterval = D3DPRESENT_INTERVAL_DEFAULT;	// インターバル

																// デバイスの生成
																// ディスプレイアダプタを表すためのデバイスを作成
																// 描画と頂点処理をハードウェアで行なう
	if (FAILED(m_pD3D->CreateDevice(D3DADAPTER_DEFAULT,
		D3DDEVTYPE_HAL,
		hWnd,
		D3DCREATE_HARDWARE_VERTEXPROCESSING,
		&d3dpp, &m_pD3DDevice)))
	{
		// 上記の設定が失敗したら
		// 描画をハードウェアで行い、頂点処理はCPUで行なう
		if (FAILED(m_pD3D->CreateDevice(D3DADAPTER_DEFAULT,
			D3DDEVTYPE_HAL,
			hWnd,
			D3DCREATE_SOFTWARE_VERTEXPROCESSING,
			&d3dpp, &m_pD3DDevice)))
		{
			// 上記の設定が失敗したら
			// 描画と頂点処理をCPUで行なう
			if (FAILED(m_pD3D->CreateDevice(D3DADAPTER_DEFAULT,
				D3DDEVTYPE_REF, hWnd,
				D3DCREATE_SOFTWARE_VERTEXPROCESSING,
				&d3dpp, &m_pD3DDevice)))
			{
				// 生成失敗
				return E_FAIL;
			}
		}
	}

	// レンダーステートの設定
	m_pD3DDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);
	m_pD3DDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);
	m_pD3DDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
	m_pD3DDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

	// サンプラーステートの設定
	m_pD3DDevice->SetSamplerState(0, D3DSAMP_ADDRESSU, D3DTADDRESS_WRAP);	// テクスチャアドレッシング方法(U値)を設定
	m_pD3DDevice->SetSamplerState(0, D3DSAMP_ADDRESSV, D3DTADDRESS_WRAP);	// テクスチャアドレッシング方法(V値)を設定
	m_pD3DDevice->SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);	// テクスチャ縮小フィルタモードを設定
	m_pD3DDevice->SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);	// テクスチャ拡大フィルタモードを設定

																			// テクスチャステージステートの設定
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_CURRENT);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CRenderer::Uninit(void)
{
	// デバイスの破棄
	if (m_pD3DDevice != NULL)
	{
		m_pD3DDevice->Release();
		m_pD3DDevice = NULL;
	}

	// Direct3Dオブジェクトの破棄
	if (m_pD3D != NULL)
	{
		m_pD3D->Release();
		m_pD3D = NULL;
	}
}

//=============================================================================
// 更新処理
//=============================================================================
void CRenderer::Update(void)
{
#ifdef _DEBUG
	// デバック表示の更新
	CDebugProc::Print("cn", "FPS:", GetFPS());
#endif

	// 全てのシーンを更新
	CScene::UpdeteAll();
}

//=============================================================================
// 描画処理
//=============================================================================
void CRenderer::Draw(void)
{
	// バックバッファ＆Ｚバッファのクリア
	m_pD3DDevice->Clear(0,
		NULL,
		(D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL),
		WINDOW_CLEAR_COLOR, 1.0f, 0);

	CFade *pFade = CManager::GetFade();
	CCameraManager* pCameraManager = CManager::GetCameraManager();
	D3DVIEWPORT9 viewportDef;
	// Direct3Dによる描画の開始
	if (SUCCEEDED(m_pD3DDevice->BeginScene()))
	{
		m_pD3DDevice->GetViewport(&viewportDef);
		//カメラ
		if (pCameraManager != NULL)
		{
			switch (CManager::GetMode())
			{
			case CManager::MODE_STAGESELECT:
				if (pCameraManager->SetCamera("STAGESELECT_CAMERA"))
				{
					CScene::DrawAll(0);
				}
				break;
			case CManager::MODE_GAME:
				if (pCameraManager->SetCamera("1P_CAMERA"))
				{
					CScene::DrawAll(1);
				}
				if (pCameraManager->SetCamera("2P_CAMERA"))
				{
					CScene::DrawAll(2);
				}
				if (pCameraManager->SetCamera("3P_CAMERA"))
				{
					CScene::DrawAll(3);
				}
				if (pCameraManager->SetCamera("4P_CAMERA"))
				{
					CScene::DrawAll(4);
				}
				if (pCameraManager->SetCamera("TOPVIEW_CAMERA"))
				{
					CScene::DrawAll(5);
				}

				if (pCameraManager->SetCamera("PAUSE_CAMERA") && CScene::GetbPause() == true)
				{
					CScene::DrawAll(5);
				}

				break;
			case CManager::MODE_TUTORIAL:
				if (pCameraManager->SetCamera("1P_CAMERA"))
				{
					CScene::DrawAll(1);
				}
				if (pCameraManager->SetCamera("2P_CAMERA"))
				{
					CScene::DrawAll(2);
				}
				if (pCameraManager->SetCamera("3P_CAMERA"))
				{
					CScene::DrawAll(3);
				}
				if (pCameraManager->SetCamera("4P_CAMERA"))
				{
					CScene::DrawAll(4);
				}
				if (pCameraManager->SetCamera("TOPVIEW_CAMERA"))
				{
					CScene::DrawAll(5);
				}
				break;
			case CManager::MODE_RESULT:
				if (pCameraManager->SetCamera("RESULT_CAMERA"))
				{
					CScene::DrawAll(5);
				}
				break;
			default:
				if (pCameraManager->SetCamera("DEFAULT_CAMERA"))
				{
					CScene::DrawAll(5);
				}
				break;
			}
		}
		m_pD3DDevice->SetViewport(&viewportDef);

		if (pFade != NULL)
		{
			// 描画処理
			pFade->Draw();
		}

#ifdef _DEBUG
		// FPS表示
		CDebugProc::Draw();
#endif
		// Direct3Dによる描画の終了
		m_pD3DDevice->EndScene();
	}

	// バックバッファとフロントバッファの入れ替え
	m_pD3DDevice->Present(NULL, NULL, NULL, NULL);
}

//=============================================================================
// 描画設定をもとに戻す
//=============================================================================
HRESULT CRenderer::ResetRenderState(void)
{
	//カリング設定
	m_pD3DDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);

	//アルファブレンドを有効化
	m_pD3DDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

	//通常合成にする
	m_pD3DDevice->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
	m_pD3DDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
	m_pD3DDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

	//ライティングを有効化
	m_pD3DDevice->SetRenderState(D3DRS_LIGHTING, TRUE);
	return S_OK;
}

//=============================================================================
// デバイスの取得
//=============================================================================
LPDIRECT3DDEVICE9 CRenderer::GetDevice(void)
{
	return m_pD3DDevice;
}