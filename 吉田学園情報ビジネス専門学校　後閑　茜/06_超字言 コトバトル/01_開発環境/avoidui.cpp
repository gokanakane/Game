//=============================================================================
//
// 回避UI処理 [avoidui.cpp]
// Author : YUTARO ABE
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "scene3D.h"		// シーン3D
#include "manager.h"		// マネージャー
#include "renderer.h"		// レンダラー
#include "avoidui.h"
#include "game.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CAvoidUi::CAvoidUi() : CScene3D(4, CScene::OBJTYPE_WALL)
{
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_nCounter = 0;
	m_bDraw = true;
	m_nCamera = 0;
	for (int nCnt = 0; nCnt < MAX_PLAYER; nCnt++)
	{	//他プレイヤーから見えているかどうか
		m_bVision[nCnt] = true;
	}
}

//=============================================================================
// デストラクタ
//=============================================================================
CAvoidUi::~CAvoidUi()
{
}

//=============================================================================
//	アイテムの生成
//=============================================================================
CAvoidUi *CAvoidUi::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 size, D3DXCOLOR col, D3DXVECTOR2 TexUV)
{
	CAvoidUi *pWall = {};

	if (pWall == NULL)
	{//	アイテムの生成
		pWall = new CAvoidUi;
		if (pWall != NULL)
		{//アイテムの初期化
			pWall->Init(pos, rot, size, col, TexUV);
		}
	}
	return pWall;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CAvoidUi::Init(D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 size, D3DXCOLOR col, D3DXVECTOR2 TexUV)
{
	 SetInitAll(pos, rot, size, col, TexUV, SCENE3DTYPE_NORMAL);
	CScene3D::Init();
	CScene3D::SetSizeY(size.y, size.x);
	CScene3D::BindTexture("AVOID");
	SetObjType(CScene::OBJTYPE_AVOIDUI);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CAvoidUi::Uninit(void)
{
	CScene3D::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CAvoidUi::Update(void)
{

}

//=============================================================================
// 描画処理
//=============================================================================
void CAvoidUi::Draw(void)
{
	// デバイス取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	if (m_bDraw == true && m_bVision[m_nCamera] == true)
	{
		pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);				// カリングなくす
		CScene3D::Draw();
		pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);				// 裏面をカリングに戻す
	}
}
